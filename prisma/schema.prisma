generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "windows"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Admin {
    id        String   @id @default(uuid())
    firstName String?
    lastName  String?
    email     String   @unique
    username  String? // Will be set after email verification
    password  String? // Will be set after email verification
    //others
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    img       String?
}

model Producer {
    id        String   @id
    firstName String
    lastName  String
    email     String   @unique
    username  String? // Will be set after email verification
    password  String? // Will be set after email verification
    //others
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    img       String?
    company   Company? @relation(fields: [companyId], references: [id])
    companyId String?

    Volume       Volume[]
    Sold         Sold[]
    Event        Event[]
    Announcement Announcement[]
}

model Staff {
    id        String   @id
    firstName String
    lastName  String
    email     String   @unique
    username  String? // Will be set after email verification
    password  String? // Will be set after email verification
    //others
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    img       String?
    company   Company? @relation(fields: [companyId], references: [id])
    companyId String?
    Volume    Volume?  @relation(fields: [volumeId], references: [id])
    volumeId  Int?
}

model Company {
    id           String         @id
    name         String         @unique
    alias        String         @unique
    address      String?
    feedstock    String?
    createdAt    DateTime       @default(now())
    producers    Producer[]
    staffs       Staff[]
    sold         Sold[]
    Event        Event[]
    Announcement Announcement[]
    volumes      Volume[]
}

model Consumer {
    id        String   @id
    name      String   @unique
    createdAt DateTime @default(now())
    solds     Sold[]
    volume    Volume[]
}

model Volume {
    id              Int       @id @default(autoincrement())
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt // Track the update time
    quarter         String?
    year            Int?
    proposedVolume  Int?
    committedVolume Int?
    begInventory    Int?
    totalStock      Int?
    sold            Int?
    unsold          Int?
    archived        Boolean   @default(false) // Indicates if the user is archived
    archivedAt      DateTime? // Timestamp when the user was archived

    companies  Company[]
    staffs     Staff[]
    produces   Produce[]
    solds      Sold[]
    producerId String?
    producer   Producer? @relation(fields: [producerId], references: [id])
    consumerId String?
    consumer   Consumer? @relation(fields: [consumerId], references: [id])
}

model Produce {
    id                     Int      @id @default(autoincrement())
    date                   DateTime @default(now())
    actualProduction       Int?
    remainingProduceVolume Int?
    month                  String?

    volumeId Int?
    volume   Volume? @relation(fields: [volumeId], references: [id])
    solds    Sold[]
}

model Sold {
    id         Int      @id @default(autoincrement())
    soldAmount Int
    mc         Int?
    mro        Int?
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    produceId  Int?
    produce    Produce?  @relation(fields: [produceId], references: [id])
    consumerId String
    consumer   Consumer  @relation(fields: [consumerId], references: [id])
    volume     Volume?   @relation(fields: [volumeId], references: [id])
    volumeId   Int?
    Producer   Producer? @relation(fields: [producerId], references: [id])
    producerId String?
    lifts      Lift[]
    Company    Company?  @relation(fields: [companyId], references: [id])
    companyId  String?
}

model Lift {
    id                  Int      @id @default(autoincrement())
    date                DateTime @default(now())
    liftVolume          Int
    remainingLiftVolume Int?
    region              String
    remark              String
    soldId              Int?
    sold                Sold?    @relation(fields: [soldId], references: [id])
}

model Event {
    id          Int      @id @default(autoincrement())
    title       String
    description String
    startTime   DateTime
    endTime     DateTime

    producerId String?
    producer   Producer? @relation(fields: [producerId], references: [id])
    Company    Company?  @relation(fields: [companyId], references: [id])
    companyId  String?
}

// model Sale {
//     id            Int      @id @default(autoincrement())
//     region        String
//     invoiceNumber Int
//     lifted        Int
//     date          DateTime

//     consumerId String
//     consumer   Consumer @relation(fields: [consumerId], references: [id])
// }

// model Invoice {
//     id          Int      @id @default(autoincrement())
//     producerId  String
//     produceId   Int
//     invoiceDate DateTime
// }

model Announcement {
    id          Int      @id @default(autoincrement())
    title       String
    description String
    date        DateTime

    producerId String?
    producer   Producer? @relation(fields: [producerId], references: [id])
    Company    Company?  @relation(fields: [companyId], references: [id])
    companyId  String?
}

model TransactionLog {
    id          Int      @id @default(autoincrement())
    entityType  String // Name of the entity affected (e.g., "User", "Producer", "Volume", "Sold")
    entityId    String // ID of the affected entity
    action      String // Action type: CREATE, UPDATE, DELETE
    changedData Json? // Stores the changed values in JSON format
    performedBy String // ID of the user who performed the action
    performedAt DateTime @default(now()) // Timestamp of the action
}

enum UserGender {
    MALE
    FEMALE
}

enum Roles {
    admin
    producer
    staff
}
